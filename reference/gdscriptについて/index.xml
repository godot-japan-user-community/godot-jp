<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GDScriptについて on Godot Japan User Community</title>
    <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
    <description>Recent content in GDScriptについて on Godot Japan User Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 27 Dec 2022 12:08:22 +0900</lastBuildDate>
    <atom:link href="https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GDScriptの基本</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/gdscript%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/gdscript%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description>Godot Engineの組み込みスクリプト言語であるGDScriptの基本的な使い方について記載します。
基本的な記述方法 extends Node var int_sanple = 0 var text_sample = &amp;#34;文字列&amp;#34; var int_sample2 :int = 1 func _ready(): pass GDSCriptは、大まかに３種類の要素で読み書きすることができます。
上記のサンプルを１行ずつ解説します。
クラスの拡張 extends Node extends NodeはNodeというクラスの拡張という意味です。
Nodeクラスが持つ機能をそのままに、新しいクラスを作ることになります。
変数 var int_sample = 0 var text_sample = &amp;#34;文字列&amp;#34; GDScriptは静的型付けの機能を持っています。
多くの言語は型を明示的に指定する必要がありますが、GDScriptは自動的に型を割り付けます。
これによりユーザーは型をあまり意識せずにプログラムを書くことができます。
明示的な型付け var int_sample2 :int = 1 型を意識したい場合もありますので、上記のように明示的に型を指定することもできます。
関数 func _ready(): pass GDScriptの関数はfuncにスペースを空けて関数名を記述します。
多くの言語のように{ }でブロックを作るのではなく、:のあとのインデントでブロックを作る構文になります。
関数にはクラスがもともと持っている組み込み関数と、ユーザーが作る独自関数の２種類があります。</description>
    </item>
    <item>
      <title>一定時間待って処理する</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E4%B8%80%E5%AE%9A%E6%99%82%E9%96%93%E5%BE%85%E3%81%A3%E3%81%A6%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 08 Feb 2023 21:57:32 +0900</pubDate>
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E4%B8%80%E5%AE%9A%E6%99%82%E9%96%93%E5%BE%85%E3%81%A3%E3%81%A6%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B/</guid>
      <description>一定時間待って処理したい場合の実装方法はいくつかあります。
カウンターを使って処理する _process()または_physics_processでカウンター変数に数値を足していき、特定の値になったら処理を実行する方法です。
var counter:int = 0 func _process(_delta): counter += 1 if _counter == 10: print(&amp;#34;do something&amp;#34;) 加算でも減算でも構いませんが、一度しか使用しない場合は変数をむやみに増やしてしまう事がデメリットです。
タイマーノードを使って処理する Timerノードは、指定した時間でシグナルを発行するノードになります。
シグナルを受け取ることで特定の処理を行う事ができます。
@onready var timer = $Timer func _ready(): timer.timeout.connect(func(): print(&amp;#34;test&amp;#34;)) timer.one_shot = true timer.start(0.5) one_shotをtrueにしないと、指定した時間で設定したメソッドが繰り返し実行されます。
時間で指定するため、フレーム単位での指定はできません。
Engine.get_frames_per_second()でfpsを取得して1/fpsとすることで1フレームを実現することはできますが、フレームレートが可変の場合は不安定になるため、時間で指定することをおすすめします。
コルーチンを使って処理する シーンツリーに直接one_shotで消えるTimerノードを設定することも可能です。
func _ready(): await get_tree().create_timer(0.5).timeout print(&amp;#34;test&amp;#34;) awaitを使用することで、シンプルに書く事ができますが、非同期処理ですので、処理の順番に注意する必要があります。
var str_test:String = &amp;#34;&amp;#34; func _ready(): await get_tree().create_timer(0.5).timeout str_test = &amp;#34;test&amp;#34; func _process(_delta): print(str_test) # 0.5秒以降でないとstr_testは空になっている。 更に詳しいawaitの使用方法は以下をご覧ください。
Godot 4 await構文 submaxさんによる記事</description>
    </item>
    <item>
      <title>数値について</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%95%B0%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%95%B0%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>数値の基本 数値の型は、主にint型とfloat型になります。
単純に言えば、intは整数で、floatは小数点のある数字（実数）です。
int型の場合、64bitの数値として、-9223372036854775807 〜 9223372036854775807までの数値を扱う事ができます。
float型の場合、エンジン内の関数などでは32bitの浮動小数点値を使用しています。
これは10進数の6桁になりますので、大きな数字を表現する場合はint型として処理するほうが良いと思います。
数値の作成方法 数値を作成するには数値リテラルを使用します。
整数の作成 var value0 :int = 1 var value1 :int = -1 # 静的型付け var value2 = 1 実数の作成 var value0 :float = 1.0 var value1 :float = -1.0 # 静的型付け var value2 = 1.0 数値に変換する方法 別の型を数値に変換（キャスト）する関数が用意されています。
intクラスメソッド メソッド名 説明 int(bool) bool型をint型に変換します。trueなら1に、falseなら0に変換します。 int(float) float型をint型に変換します。端数は切り捨てられますので、例えば2.7の場合は2に、-0.7の場合は0になります。 int(String) 有効なString型をint型に変換します。すべて無効な文字列は無視され0が返されます。例えば&amp;quot;test1&amp;quot;の場合は1に、&amp;quot;1e3&amp;quot;の場合は13になります。 floatクラスメソッド メソッド名 説明 float(bool) bool型をfloat型に変換します。trueなら1.0に、falseなら0.0に変換します。 float(int) int型をfloat型に変換します。1の場合は1.0に変換されます。 float(String) 有効なString型をfloat型に変換します。このメソッドはfloat文字列（&amp;quot;0.72&amp;quot;など）や指数表記文字列を受け入れるため、1e3の場合は1000.0になります。（1e3 = 1×10の3乗 = 1000）それまで解析した結果を返して処理を終了するため、1e3a2の場合は1000.0となり、後半のa2は無効となります。 特殊な数値の表し方 2進整数（int型） 0と1で表す2進数ですが、Godot Engineでは、最終的にint型として扱われます。</description>
    </item>
    <item>
      <title>文字列について</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>文字列の基本 文字列は非常に単純なデータ型であり、コピーオンライトという方式が取られています。
参照渡しができない型の場合、他の変数に渡すとすぐに複製されますが、Godot Engineの場合、渡された時点では参照渡しであり、変更があった場合に複製されます。
つまり、変更がない場合は複製されないのでメモリの節約になります。
また、Godot Engineでは文字列を加工するメソッドが多数用意されています。
文字コードについて Godot EngineはUnicodeをサポートしています。
文字列の作成方法 文字列を作成するには、文字列リテラルを使用し、ダブルクォーテーション&amp;quot;&amp;quot;でくくります。
var value :String = &amp;#34;あいうえお&amp;#34; # あいうえお 文字列の中でダブルクォーテーションを使う 文字列リテラルでダブルクォーテーションを使用しているため、文字列内にダブルクォーテーションを使用することができません。
その場合、エスケープ文字を使い、\&amp;quot;と記述します。
var value :String = &amp;#34;\&amp;#34;かきくけこ\&amp;#34;&amp;#34; # &amp;#34;かきくけこ&amp;#34; 他の型を文字列に変換する ほとんどの型をStringに変換することができますが、Stringクラスで変換するわけではありません。
String(100)などとするとエラーが出ます。
str(100) var_to_str(100) 文字列の処理 文字列を連結する 連結演算子+または+=を使用して、複数の文字列を連結します。
var value :String = &amp;#34;あいう&amp;#34; + &amp;#34;え&amp;#34; # あいうえ value += &amp;#34;お&amp;#34; # あいうえお 他の型と文字列を連結する 他の型と連結する場合は、どちらも文字列に揃える必要があります。
var value :String = &amp;#34;あいうえお&amp;#34; value += str(100) print(value) # あいうえお100 文字列同士を比較する 文字列が同じかどうかを比較する場合、==等価演算子を使用することができます。
var value = &amp;#34;あいう&amp;#34; == &amp;#34;あいう&amp;#34; # true また、文字コードの大小を、&amp;lt;または&amp;gt;の比較演算子を使用することで判別できます。</description>
    </item>
  </channel>
</rss>
