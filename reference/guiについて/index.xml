<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GUIについて on Godot Japan User Community</title>
    <link>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
    <description>Recent content in GUIについて on Godot Japan User Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 14 Dec 2022 14:10:24 +0900</lastBuildDate>
    <atom:link href="https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Controlノードについて</title>
      <link>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/control%E3%83%8E%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Thu, 15 Dec 2022 13:50:29 +0900</pubDate>
      <guid>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/control%E3%83%8E%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>Godot EngineのControlノードはGUI（グラフィカルユーザーインターフェース）を作成する機能になります。&#xA;もちろん、同じCanvasItemを継承するNode2DでもGUIを作ることは可能ですが、レスポンシブなレイアウト機能や自動的なフォーカス機能などを持っているため、独自のプログラムを組まずともGodot Engineのエディタで簡単にデザインができる事が特徴です。&#xA;また、翻訳を設定していると自動的にノードに含まれたテキストを翻訳したり、テーマを設定することができます。&#xA;概念 基点とアンカー まず、アンカーとは、画面または親のControlノードの基準となる位置です。&#xA;アンカーには、上下左右の4点の設定があり、これらはあくまでも相対的な割合になります。&#xA;例えば、左上にアンカーがある場合は、画面（または親のControlノード）の左上から0の相対的な位置を示します。&#xA;上記の例で言うと、Left：0, Top：0と共にRight：0, Bottom：0になっているのがわかります。&#xA;それぞれ、0~1の間で、画面または親のControlノードの左上を基準とした位置の割合になります。&#xA;つまり、Left:0, Top:0, Right:1, Bottom:1は画面全体となります。&#xA;アンカーの設定方法 Godot Engine 4.0からアンカーは自動的に設定しやすくなりました。&#xA;Controlノードを選択して、エディタビューポートの上部のメニューから、アンカーの設定をワンクリックで設定できるようになっています。&#xA;細かな調整をする場合は、前項までの設定を個別にする必要がありますが、多くの場合はプリセットで対応可能かと思います。&#xA;機能 翻訳 ! 翻訳については別ページで詳しく説明しますが、この項目ではControlノードが持つ翻訳についての機能のみを取り上げます。 Controlノードを継承するノードすべてに翻訳するかどうかのプロパティが設定されています（デフォルトはauto_translate: true）&#xA;例えば、ButtonやLabelなどのテキストが表示されているノードの文字を翻訳するかどうかのプロパティになります。&#xA;翻訳データが無い場合は、デフォルトの言語が使われるため、基本的には意識しなくても問題ありません。&#xA;ただし翻訳データが存在している場合、ノードに使用されている文言を翻訳すると自動的に置き換わりますので、翻訳キーには注意が必要です。&#xA;フォーカス Controlノードは、tabキーや上下左右キー（対応するゲームパッドの方向キーなど）を押した際に自動的にフォーカスする機能を持っています。&#xA;例えば、複数のボタンを方向キーで選択することができます。&#xA;ただし、画面上のフォーカスができるすべてのノードを自動的に選んで選択するため、画面レイアウトによっては明示的にフォーカス機能を一時的にオフにする などの対応が必要になります。&#xA;var btn:Button = $Button func _ready(): # フォーカスを無効にする btn.focus_mode = Control.FOCUS_NONE # フォーカスを有効にする btn.focus_mode = Control.FOCUS_ALL # マウスクリックのみのフォーカスを受け付ける btn.focus_mode = Control.FOCUS_CLICK マウスクリック制限とスルー Controlノードはレイアウトとして複数重なる事が多く起こります。&#xA;例えば、ボタンとウィンドウはどちらもControlノードで重なっていることが多いですし、さらにそのウィンドウのうらには別のウィンドウが表示されている場合もあります。&#xA;こういった場合に、ボタンをクリックすると、後ろにあるボタンも反応してしまう または、あえて反応させたい というシチュエーションがあります。&#xA;これらの挙動もいくつかのプロパティが用意されています。&#xA;クリックの深さ ControlノードのインスペクタからMouseセクションのFilterに設定があります。&#xA;GDScriptでは以下のようになります。&#xA;var btn:Button = $Button func _ready(): btn.</description>
    </item>
    <item>
      <title>画面レイアウトについて</title>
      <link>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E7%94%BB%E9%9D%A2%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Wed, 14 Dec 2022 14:11:39 +0900</pubDate>
      <guid>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E7%94%BB%E9%9D%A2%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>Containerノードの基本 Container（コンテナ）ノードは、子ノードとしてコンテンツを持つことを前提としたノードです。&#xA;子ノードであるコンテンツを自動的にレイアウトすることを目的とした機能を持っています。&#xA;継承元のContainerノード自体はControlノードとほとんど機能は変わりませんので、単体で使用することはありません。&#xA;基本的にはContianerを継承している以下で紹介するノードの拡張のために準備された機能を持っています。&#xA;コンテンツのレイアウト設定 基本的にContainerの子ノードであるコンテンツはそれぞれの機能に応じて、自動的に大きさが決定され配置されます。&#xA;これは基本的に、コンテンツ自体のサイズやレイアウトを自由に決めることができないことを意味します。&#xA;ただし、コンテンツごとのContainer Sizingで、コンテナ内でのサイズの設定を変更することができます。&#xA;これらはControlノードのレイアウト設定なので、Controlノードについてを参照してください。&#xA;単一コンテナ 単一コンテナはコンテンツを自動的にレイアウトしませんが、単一のコンテンツに対するレイアウトの設定を行うことができます。&#xA;パネルを作る PanelContainerは目に見えてわかりやすいコンテナです。&#xA;グラフィックが設定できるという以外は、基本のContainerノード（Controlノード）と同じ機能になります。&#xA;panelのプロパティを持っていますので、テーマでスタイルを設定することができ、ウィンドウやヘッダー・フッターなどの下地に活用できます。&#xA;テーマとスタイルについては、テーマとスタイルについてを参照してください。&#xA;コンテンツのアスペクト比を固定する AspectContainerは、自身のサイズが変わっても、コンテンツの縦横比を変えずにコンテンツを拡大・縮小して表示します。&#xA;その際、縦を基準とするか横を基準とするかを設定することができます。&#xA;コンテンツのマージンを空ける MarginContainerはconstantsプロパティで、上下左右のマージンをピクセル単位で設定することができるコンテナです。&#xA;コンテナ内のコンテンツに対し、それぞれのマージンを設定することができます。&#xA;コンテンツをコンテナの縦横中央に配置する CenterContainerは、コンテンツを親であるCenterContainerの縦横中央に配置します。&#xA;親コンテナはコンテンツの大きさが最小の大きさになります。&#xA;コンテンツをスクロールする ScrollContainerは、コンテンツをスクロールします。&#xA;親コンテナからはみ出したコンテンツはクリッピングされます。&#xA;整列コンテナ 整列コンテナは複数のコンテンツを自動的にレイアウトするコンテナです。&#xA;例えば、ゲームのインベントリや、設定画面の項目を並べるような場合に活用できます。&#xA;縦並び・横並びにする VBoxContainerまたはHBoxContainerは、複数のコンテンツを自動的に縦または横に並べて配置します。&#xA;コンテナのサイズよりも、コンテンツの合計サイズが大きくなる場合ははみ出して表示されます。&#xA;設定された個数分のコンテンツを順番に並べる GridContainerは、Columnsプロパティで設定された個数分のコンテンツを並べ、その個数を超えたら次の行に並べます。&#xA;もしも並んだコンテンツの横幅が、親のコンテナであるGridContainerの横幅を超えた場合であっても、必ず並べるのが特徴です。&#xA;コンテンツの大きさに応じて並べる FlowContainerは、コンテンツの大きさに応じて自動的に並べ、GridContainerのように詰めて表示します。&#xA;親のコンテナであるFlowContainerの幅に応じて、収まりきらないコンテンツは次の行または列にカラム落ちします。&#xA;My PR for implementing FlowContainers(H/V) got merged today! This type of container arranges its child nodes similar to text and autowraps the ones which don&amp;#39;t fit in a line.</description>
    </item>
  </channel>
</rss>
